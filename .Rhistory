devtools::install_github("Hobbeist/kappaRule")
library(mlbench)
library(rsample)
library(tidyverse)
library(ruleFit)
data("PimaIndiansDiabetes")
data <- PimaIndiansDiabetes
y <- "diabetes"
data$diabetes <- as.factor(ifelse(data$diabetes %in% "neg", 0, 1))
# Train and Test set
set.seed(456)
split <- initial_split(data)
train <- training(split)
test  <- testing(split)
# Model
rf_results <-
kappaRule(data = train,
y = "diabetes",
ntree = 20,
max.depth = 3,
rule.filter = 10,
rule.extract.cores = 64,
kappa.cores = 64
)
rf_results
kappaRule_metrics
#' @importFrom broom tidy
#' @importFrom caret confusionMatrix
#'
#' @export
kappaRule_metrics <- function(test_data,
model,
measure = NULL){
results_test <- broom::tidy(caret::confusionMatrix(table(test_data[,model$y],
predict.ruleFit(test_data, model))))%>%
dplyr::select(term, estimate) %>%
dplyr::rename(Test_Metrics = estimate) %>%
dplyr::rename(Measure = term) %>%
dplyr::filter(!Measure %in% "mcnemar")
results_train <- broom::tidy(caret::confusionMatrix(table(model$RuleData[,model$y],
predict(model$RuleFit,
Matrix::as.matrix(model$RuleData %>%
dplyr::select(!!-model$y)),
type = "class"))))%>%
dplyr::select(term, estimate) %>%
dplyr::rename(Train_Metrics = estimate) %>%
dplyr::rename(Measure = term) %>%
dplyr::filter(!Measure %in% "mcnemar")
return(as_tibble(cbind(results_train, results_test[,"Test_Metrics"])))
}
kappaRule_metrics(test, rf_results)
roxygen2::roxygenise()
predict(test, rf_results)
predict(rf_results, train)
predict(rf_results, test)
predict(rf_results, test_data=test)
predict.ruleFit(rf_results, test_data=test)
predict.ruleFit(test_data=test, rf_results)
roxygen2::roxygenise()
library(ruleFit)
devtools::install_github("Hobbeist/kappaRule")
roxygen2::roxygenise()
devtools::install_github("Hobbeist/kappaRule")
library(mlbench)
library(rsample)
library(tidyverse)
library(ruleFit)
data("PimaIndiansDiabetes")
data <- PimaIndiansDiabetes
y <- "diabetes"
data$diabetes <- as.factor(ifelse(data$diabetes %in% "neg", 0, 1))
# Train and Test set
set.seed(456)
split <- initial_split(data)
train <- training(split)
test  <- testing(split)
# Model
rf_results <-
kappaRule(data = train,
y = "diabetes",
ntree = 20,
max.depth = 3,
rule.filter = 10,
rule.extract.cores = 64,
kappa.cores = 64
)
kappaRule::kappaRule_metrics(test, rf_results)
kappaRule::kappaRule_metrics(test, rf_results)
rf_results
roxygen2::roxygenise()
devtools::install_github("Hobbeist/kappaRule")
rm(list=ls())
library(mlbench)
library(rsample)
library(tidyverse)
library(ruleFit)
data("PimaIndiansDiabetes")
data <- PimaIndiansDiabetes
y <- "diabetes"
data$diabetes <- as.factor(ifelse(data$diabetes %in% "neg", 0, 1))
# Train and Test set
set.seed(456)
split <- initial_split(data)
train <- training(split)
test  <- testing(split)
# Model
rf_results <-
kappaRule(data = train,
y = "diabetes",
ntree = 20,
max.depth = 3,
rule.filter = 10,
rule.extract.cores = 64,
kappa.cores = 64
)
kappaRule::kappaRule_metrics(test, rf_results)
kappaRule::kappaRule_metrics(test_data =  test, model = rf_results)
test
rf_results
test_data <- test
model <- rf_results
results_test <- broom::tidy(caret::confusionMatrix(table(test_data[,model$y],
predict.kappaRule(model = model, test_data = test_data))))%>%
dplyr::select(term, estimate) %>%
dplyr::rename(Test_Metrics = estimate) %>%
dplyr::rename(Measure = term) %>%
dplyr::filter(!Measure %in% "mcnemar")
predict(rf_results, test)
library(kappaRule)
remove.packages("kappaRule", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github("Hobbeist/kappaRule")
remove.packages("ruleFit", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
library(mlbench)
library(rsample)
library(tidyverse)
library(kappaRule)
data("PimaIndiansDiabetes")
data <- PimaIndiansDiabetes
y <- "diabetes"
data$diabetes <- as.factor(ifelse(data$diabetes %in% "neg", 0, 1))
# Train and Test set
set.seed(456)
split <- initial_split(data)
train <- training(split)
test  <- testing(split)
# Model
rf_results <-
kappaRule(data = train,
y = "diabetes",
ntree = 20,
max.depth = 3,
rule.filter = 10,
rule.extract.cores = 64,
kappa.cores = 64
)
kappaRule::kappaRule_metrics(test_data =  test, model = rf_results)
roxygen2::roxygenise()
library(kappaRule)
remove.packages("kappaRule", lib="~/R/x86_64-pc-linux-gnu-library/4.1")
roxygen2::roxygenise()
